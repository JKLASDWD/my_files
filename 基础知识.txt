基础知识

————————————————

机器语言，汇编语言，高级语言

机器语言——0,1,计算机可直接理解

汇编语言——用缩写符号表示指令代码，需要翻译才能被理解

高级语言——按照一定的语法规则编写，需要用编译程序翻译成机器指令才能被执行

编译：高级语言源程序——编译程序——机器语言目标程序——目标程序+运行子程序（函数）（exe文件）

解释：高级语言源程序——解释程序——运行结果

算法的描述方法

自然语言，流程图，N-S图，伪代码

算法是为解决一个特定问题而采取的方法和步骤

有穷性，确定性，有效性，有零个或多个输入，有一个或多个输出

————————————————

C语言程序设计 入门

————————————————

 C语言≠ C++/C#

C/C++主要在于底层知识与数据结构，C#/java更多需要了解特定机制与设计模式

主要编译器： Visual Studio C++  /       dev C++

C语言标准： ANSI C         C89         C99          C11

C语言适合编写系统软件、嵌入式系统程序、驱动程序、底层驱动程序、图像处理程序

语法

数据表达、数据的输入和输出、流程控制、设计函数



int main()            main函数可调用其他函数，是C语言中必需的函数

stdio.h   标准输入输出库

注释   /* 注释  */

％d整型输出，％ld长整型输出，

％o以八进制数形式输出整数，

％x以十六进制数形式输出整数，

％u以十进制数输出unsigned型数据(无符号数)。

％c用来输出一个字符，

％s用来输出一个字符串，

％f用来输出实数，以小数形式输出，（备注：浮点数是不能定义如的精度的，所以“%6.2f”这种写法是“错误的”！！！）

％e以指数形式输出实数，

％g根据大小自动选f格式或e格式，且不输出无意义的零。

scanf(控制字符，地址列表) 
格式字符的含义同printf函数，地址列表是由若干个地址组成的表列，可以是变量的地址，或字符串的首地址。如scanf("％d％c％s",&a,&b,str)；

scanf用于给变量赋用户输入的值

printf用于输出

int printf(const char *format,[argument]); 例：printf（“输出的数据为%d”,a）其中

　　format 参数输出的格式，定义格式为：

　    %[flags] [width] [.perc] [F|N|h|l]type

　　规定数据输出方式，具体如下：

　　1.type 含义如下：

　　d 有符号10进制整数

　　i 有符号10进制整数

　　o 有符号8进制整数

　　u 无符号10进制整数

　　x 无符号的16进制数字，并以小写abcdef表示

　　X 无符号的16进制数字，并以大写ABCDEF表示

　　F/f 浮点数

　　E/e 用科学表示格式的浮点数

　　g 使用%f和%e表示中的总的位数表示最短的来表示浮点数 G 同g格式，但表示为指数

　　c 单个字符

　　s 字符串

　　% 显示百分号本身

　　p 显示一个指针，near指针表示为：XXXX

　　far 指针表示为：XXXX：YYYY

　　n 相连参量应是一个指针，其中存放已写字符的个数

　　2.flags 规定输出格式，取值和含义如下：

　　无 右对齐，左边填充0和空格

　　- 左对齐，右边填充空格

　　+ 在数字前增加符号 + 或 -

　　一个空格 只对负数显示符号

　　# 当type=c,s,d,i,u时没有影响

　　type=o,x,X时，分别在数值前增加'0',"0x","0X"

　　type=e,E,f时，总是使用小数点

　　type=g,G时，除了数值为0外总是显示小数点 3.width 用于控制显示数值的宽度，取值和含义如下n(n=1,2,3...) 宽度至少为n位，不够以空格填充

　　0n(n=1,2,3...) 宽度至少为n位，不够左边以0填充 * 格

　　式列表中，下一个参数还是width 4.prec 用于控制小数点后面的位数，取值和含义如下：

　　无 按缺省精度显示

　　0 当type=d,i,o,u,x时，没有影响

　　type=e,E,f时，不显示小数点

　　n(n=1,2,3...) 当type=e,E,f时表示的最大小数位数

　　type=其他，表示显示的最大宽度 .*

　　格式列表中，下一个参数还是width

　　5.F|N|h|l 表示指针是否是远指针或整数是否是长整数

　　F 远指针

　　n 近指针

　　h短整数或单精度浮点数

　　l 长整数或双精度浮点数

　　1.一般格式

　　printf(格式控制，输出表列）

　　例如：printf("i=%d,ch=%c/n",i,ch);

　　说明:

　　(1)“格式控制”是用双撇号括起来的字符串，也称“转换控制字符串”，它包括两种信息：

　　①格式说明：由“%”和格式字符组成，它的作用是将输出的数据转换为指定的格式输出。

　　②普通字符，即需要原样输出的字符。

　　（2）“输出表列”是需要输出的一些数据，可以是表达式

　　(3）printf函数的一般形式可以表示为

　　printf(参数1，参数2，……，参数n)

　　功能是将参数2～参数n按参数1给定的格式输出

　　2.格式字符（9种）

　　（1）d（或i）格式符。用来输出十进制整数，有以下几种用法：

　　①%d，按整型数据的实际长度输出。

　　②%md，m为指定的输出字段的宽度。如果数据的位数小于m，则左端补以空格，若大于m，则按实际位数输出。

　　③%ld(%mld 也可)，输出长整型数据。

　　例如：long a=123456;

　　printf("%ld",a);

　　（2）o格式符，以八进制数形式输出整数。格式：%o，%mo,%lo，%mlo都可。

　　（3）x(或X)格式符，以十六进制数形式输出整数。格式：%x，%mx,%lx，%mlx都可。

　　(4)u格式符，用来输出unsigned型数据，即无符号数，以十进制数形式输出。格式：%u，%mu,%lu都可。

　　参见:li4-3.c/*无符号数据的输出*/

　　(5)c格式符，用来输出一个字符。格式：%c，%mc都可。

　　(6)s格式符，用来输出一个字符串。格式：%s，%ms,%-ms，%m.ns，%-m.ns都可。

　　参见：li4-5.c /*字符串的输出*/

　　（7）f格式符，用来输出实数（包括单、双精度），以小数形式输出。格式：%f，%m.nf，%-m.nf都可。

　　注意：单精度实数的有效位数一般为7位，双精度为16位。

　　参见：li4-6.c/*输出单精度实数时的有效位数*/

　　li4-7.c/*输出双精度实数时的有效位数*/

　　li4-8.c/*输出实数时指定小数位数*/

　　（8）e(或E)格式符，以指数形式输出实数。格式：%e，%m.ne，%-m.ne都可。

　　(9)g(或G)格式符，用来输出实数，它根据数值的大小，自动选f格式或e格式（选择输出时占宽度较小的一种）。

　　3.说明

　　（1）除了X、E、G（用大写字母表示）外，其他格式字符必须用小写字母；

　　（2）“格式控制”字符串内可以包含转义字符；

　　（3）如果想输出字符“%”，则应该在“格式控制”字符串中用连续两个%表示，如：

　　printf("%f%%",1.0/3);

　　（4）格式字符表参见下表

　　表4.1 printf格式字符

　　格式字符 说 明

　　d,i 以带符号的十进制形式输出整数（正数不输出符号）

　　o 以八进制无符号形式输出整数（不输出前导符0）

　　x,X 以十六进制无符号形式输出整数（不输出前导符0x）,用x则输出十六进制数的a～f时以小写形式输出，用X时，则以大写字母输出

　　u 以无符号十进制形式输出整数

　　c 以字符形式输出，只输出一个字符

　　s 输出字符串

　　f 以小数形式输出单、双精度数，隐含输出6位小数

　　e,E 以指数形式输出实数

　　g,G 选用%f或%e格式中输出宽度较短的一种格式，不输出无意义的0

　　表4.2 printf的附加格式说明字符

　　字符

　　说明

　　字母l

　　用于长整型整数，可加在格式符d、o、x、u前面

　　m(代表一个正整数)

　　数据最小宽度

　　n(代表一个正整数)

　　对实数，表示输出n位小数；对字符串，表示截取的字符个数

　　-

　　输出的数字或字符在域内向左靠

——————————————————————————

C语言变量定义

常数，变量，运算符，表达式，函数，控制结构

C语言的保留字要用小写

标识符：为程序的构成成分命名（变量名，函数名，文件名，类型名）

1只能由字母，数字，下划线组成

2首字母必须为字母或下划线

3大小写

4不能用保留字

int 整型         /* 如 int a,b,c */

float 单精度浮点型

0012FF30  不同变量占不同字节 内存从，变量从0012FF30开始

——

数据类型包括基本类型和构造类型

构造类型：数组，结构体类型，共用体类型

基本类型：算术类型，指针类型

算术类型：整型，字符型，实型（浮点型），枚举类型

整型：基本类型，短整型，长整型，无符号整型

实型：单精度型，双精度型，长双精度型

整型

基本整型 4字节 int

短整型 short int (short) 2字节                 -2^15~2^15-1  符号位用来存放 正负 ，16位有15位存放数据

符号位 0代表正号，1代表负号

长整型 long int （long）4字节

无符号基本整型 unsigned int （unsigned） 4字节     范围 0——2^32 -1

无符号 ~....

字符型，实型

char 字符型 1个字节

float 单精度实型 4字节

double 双精度实型 8字节

long double 长双精度实型 8字节

sizeof 运算符 获取变量和数据类型所占内存大小

sizeof （数据类型名或表达式）



短整型最大值  0111 1111 1111 1111 32767(2^15 -1)

若进行加1运算，变成 1000 0000 0000 0000 ,变为负数 -2^15（补码运算）

发生溢出



C语言中负数是以补码的形式进行存储的。

示例：负数-1， （此处，假设是8位二进制表示） 
对应正数的原码：0000 0001； 
取反： 1111 1110； 
加1： 1111 1111； 
最终，-1是以1111 1111的形式进行存储的。

理论知识 
计算机中的符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。

正整数的补码是其二进制表示，与原码相同；
求负整数的补码，将其对应正数二进制表示所有位取反（包括符号位，0变1，1变0）后加1；



因为正数加它对应的负数为0
所以补码必须保证相加为0，但若只取反相加后就全为1
就必须再加一个1才能使其溢出，也就成了0



## 实型数据

浮点数——科学计数法

N=数符X R^E X M

数符 0为正，1为负 M为尾数，E为阶码，R为尾数

浮点数标准格式 IEEE754

float 23位尾数，其中是6~7位有效数字

1位数符，8位阶码

double

1位数符，11位阶码，52位尾数，其中16位是有效数字

尾数的位数决定数的精度

阶码的位数决定数的范围

浮点数仅是数字的近似值，并非真正意义的



## 常量

0 八进制

0x 十六进制

实型常量

十进制数形式，数字，小数点，正负号

指数形式 数字，小数点，字母e/E及正负号组成

**例：3298e+10 等价于 32980000000000
3267e-6 等价于 0.003267**

### 符号常量 

用一个符号代表一个常量，必须在函数开始后用宏定义进行声明

#define 宏名 符号串

例

#include <stdio.h>

#define ...

因为不是C语句，不加分号

习惯大写字母定义宏名

const常量

例:const double pi=3.1415

const float ...

字符常量

用单引号括起来的**一个**字符

例 'A' 'a' '$'.....

char c= 'Y'

字符串常量

双引号括起来的一个或多个字符

”abc“...

转义字符

\n 换行

\v 垂直制表

\b 退格

\r 回车

\f 走纸换页

\t 跳到下一个制表位 （8列）

\\\ 反斜线字符

\‘ 单引号字符

\\"  双引号字符

\ddd 1~3八进制表示的字符

\xdd 1~2位十六进制表示的字符





# **运算符**

算术运算符，关系运算符，逻辑运算符，位运算符，赋值运算符

运算符具有优先级

优先级分1-15

单目取正负——乘除取余——加减

优先级规定了运算的先后次序

结合性：具有相同优先级的运算符相邻出现时，结合方向决定了先后次序

##### 单目运算符

只有一个运算对象的运算符

int a = 10....

##### 整除问题

有一个是负数，采取向零取整

##### 求余运算

%

只作用于两个整数的运算，结果的符号与被除数的符号一致

##### 常用数学库函数

math.h

平方根 sqrt(x)

绝对值 fabs

幂函数 pow (x,n)

指数 exp(x)   e的x次

log(x) ——ln x

三角函数 sin(x)

#### 赋值运算符

=

变量名=常量或表达式

优先级:2，结合性 从右向左

若左右类型不一致，以左边变量的类型为准，将表达式值的类型转换为左边的类型

例: float赋给int，丢失小数部分

   double赋给float 数值溢出或损失精度

#### 复合赋值运算

在=之前加上其它运算符

+=,-=.*=./=,%=（算术运算)

结合性均为从右向左

<<=,>>=,&=,^=,丨=（与位运算有关）

能够简化程序书写，结合性同样从右至左

两个运算符中间不能有空格

**例:a+=b   ———— a=a+b**

**a-=b   ————  a=a-b**  

**...........**

**进行运算时要注意类型的转化**

同时值也会进行相应的变化，要注意

例: a+=a-=a*=3

此处a=0



### 自增自减运算

++,--

(大多用于循环)

二者为单目运算符，只能用于变量，不能用于常量或表达式

格式: ++变量/--变量/变量++/变量--

能使变量的值增加1或减1

2者越有不同

++a与a++都能完成 a=a+1 （若不进行赋值，则变量的值不会发生变化，必须写a=++a)

++a表达式的值为a+1后的值

a++表达式的值为a原来的值

#### 前缀及后缀运算

++i，--i 先对i的值处理，再使用处理后的值

例如，k=++i  等价于 i=i+1，k=i

同理，后缀运算符...

k=i++  等价于 k=i ，i=i+1

**例: k=-a++**

**当a=1时，k=-1，a=2**

使用自增自减运算生成的代码效率会高些

不建议过多组合进表达式使用，不同的编译系统会产生不同的运算结果

例：k=++i+++i+++i

### 逗号运算符及逗号表达式

所有运算符中优先级最低的运算符

形式：表达式1，表达式2，....

顺次求解表达式1,2...

逗号表达式的值为表达式n的值，类型也为表达式n的类型

结合性，从左向右

**例:a=3*5, a * 4         60**

**a=3*5,a * 4 ,a+5**       **20**

### 数据类型转换

自动进行——隐式转换

整型，实型，字符型可以混合运算，系统自动转换成占内存字节数最大的操作数类型

强制进行——显式转换

根据需要降某一个表达式的值的类型强制转换为用户指定的类型

自动转换

**转换规则**

**short,char——int——unsigned int——long int ——unsigned long ——float ——double**

由低向高转换

例：已知 int i;long e;float f;double d

f =  10 + 'a' + i*f -d/e

​         int         double  double

​                double

​                        double

*f仍为float

**强制类型转换**

形式 （类型名）表达式

例： （double）（a+b）

​        若不加括号，只对a进行转换

**所得的仅是一个中间量，实际a的类型没有改变**

### 数据的格式化输出与输出

输出：由计算机向显示器，打印机等外部设备输出数据

输入：由标准输入设备键盘，鼠标等向计算机输入数据

输入输出操作是由C函数库中的函数实现

调用输入输出函数时，要求在源文件中包含"stdio.h"头文件

格式输出函数 printf()

printf(格式控制串，输出表列)

格式控制串由%和格式符及普通字符组成

输出表列是一些输出的数据，可以是常量，变量及表达式

一条输出语句可以输出多个数据

参数必须与格式相匹配

#### 格式控制符

%d

%f       默认小数保留6位

%e       13列宽，小数6位

%c        字符形式输出单个字符   （char）

%u        十进制无符号形式输出 unsigned int （若输出负数，则按照负数存储的二进制对应输出正数，如-1输出65536）

%o 以八进制输出整型数或无符号整数  按八进制格式输出6位

%x 以十六进制数输出整型数或无符号整数  按十六进制输出4位

#### 格式修饰符

一般格式

%  [-]   [m] [.]  [n]  [l]

-数据的宽度小于显示宽度时，数据左对齐，右方补空格

m 输出数据占m个字符位，若实际数据的宽度大于m，按实际输出；实际数据的宽度小于m，数据右对齐，左边补空格

n  输出数据有n位小数

m.n 输出数据占m列，n位小数

l用于常整型或双精度型数据

% %%用于输出字符%

**例：float x =12.3456725**

**printf("%10f",x)  ——    空格12.345673**

**printf("%-10f",x) ——  12.345673空格**

printf("%.10f",x)...........

### 数据的交互式输入

scanf(格式控制串，**地址表列**)

scanf("%d%d",&a,&b)

地址表列由若干个地址组成，可以是变量地址或字符串首地址

d，f，e

c 单个字符

s 一个字符串

格式修饰符

% [m]  [l] [L] [h]    

m 指定位宽

l  d,u格式前：输入 long型

  f，e 前 ：输入double型

L f，e 前  输入long double 型

h 加在d前，输入short型

#### 分隔多个输入数据的方法

一个或多个空格

回车键，tab键

达到书输入位宽

遇到非法字符

**例:**

**scanf(%3d%3d,&a,&b)**

**三个位宽**

格式控制符中包含普通字符，输入时必须按照原样输入

例: scanf("a=%d",&a)

输入时也要 a=...，否则将导致输入结束

若采用错误的输入格式，会产生奇怪的结果

输入时不允许指定数据的精度，不允许加\n

### 单个字符的输入和输出

getchar()

putchar()

getchar:只能输入一个字符，可以将获得的字符赋给int/char型变量

速度i，以回车符\n结束字符的输入，输入的字符放在输入缓冲区

putchar输出一个指定的字符

putchar() ()填变量或常量

getchar()一次输入，多次顺序读取



**1.getchar()工作原理及作用**
**工作原理：getchar()是stdio.h中的库函数，它的作用是从stdin流中读入一个字符，也就是说，如果stdin有数据的话不用输入它就可以直接读取了，第一次getchar()时，确实需要人工的输入，但是如果你输了多个字符，以后的getchar()再执行时就会直接从缓冲区中读取了。**
**实际上是 输入设备->内存缓冲区->getchar()**
**你按的键是放进缓冲区了,然后供程序getchar()**
**你有没有试过按住很多键然后等一会儿会滴滴滴滴响,就是缓冲区满了,你后头按的键没有存进缓冲区.**
**键盘输入的字符都存到缓冲区内,一旦键入回车,getchar就进入缓冲区读取字符,一次只返回第一个字符作为getchar函数的值,如果有循环或足够多的getchar语句,就会依次读出缓冲区内的所有字符直到’\n’.要理解这一点,之所以你输入的一系列字符被依次读出来,是因为循环的作用使得反复利用getchar在缓冲区里读取字符,而不是getchar可以读取多个字符,事实上getchar每次只能读取一个字符.如果需要取消’\n’的影响,可以用getchar();来清除,这里getchar();只是取得了’\n’但是并没有赋给任何字符变量,所以不会有影响,相当于清除了这个字符.**

**作用1:从缓冲区读走一个字符，相当于清除缓冲区。**

**作用2:前面的scanf()在读取输入时会在缓冲区中留下一个字符’\n’（输入完按回车键所致），所以如果不在此加一个getchar()把这个回车符取走的话，接下来的scanf()就不会等待从键盘键入字符，而是会直接取走这个“无用的”回车符，从而导致读取有误。**





### 关系运算符与关系表达式

进行比较大小的运算，产生比较的结果  1/0

大于>

大于等于>  =

<

<= 

==   等于      }

！= 不等于   }        两者优先级低于上者  

关系运算符的优先级和结合性

**结合性均为从左到右**

算术运算符>关系运算符>赋值运算符

可以用括号改变优先级

由于C语言没有逻辑型数据，1代表真，0代表假

**例:6>5>4**

**6>5，为真，值为1**

**1>4，为价，值为0**

**最终表达式的值为0，为假**

#### 关系表达式设定控制条件

1.判断奇偶数

z%2

2.判断x与y的某位数字是否相同

x%10==y%10 判断个位数上的数字相同

3.判断浮点数是否相等

浮点数——二进制科学计数法，存在误差

不能直接==判断

只能相减取绝对值，再根据设定的精度进行判断

fabs(a-b)<1e-6

10^-6

### 逻辑运算符与逻辑表达式

&&

||

!

逻辑与，逻辑或，逻辑非

！、++、--、sizeof——算术运算符——关系运算符——&&、||——赋值运算符

结合性：逻辑非：从右向左

逻辑与和逻辑或：左结合

**程序分支的结构——If语句**

If （表达式）

语句A（原则上一条，多条要用花括号）

**例：**

**If  （）**

**{**

**语句A**

**语句B**

**}**

选择语句：根据给定的表达式决定要执行的程序操作

If

else if

else if

....

else

If语句嵌套时，else与最近的if结合

### **多重分支控制结构——switch语句**

switch （表达式）

{

case 常量1:  语句序列1   （可以是一条，或者是多条，无须花括号）

case 常量2:

case 常量n:

[default : 语句序列n]

计算表达式，找到常量表达式相符合，**执行该case后面的语句序列以及后面的所有语句块**

**若要终止语句序列执行，可以使用break;**

**switch括号内的表达式可以是int,char**

**case后面的常量表达式互不相同，不能进行范围的判断**

**case和default的位置可任意**

**switch可以嵌套**

### 条件运算符与条件表达式

唯一的三目操作符，要求有三个操作符

格式：表达式1？表达式2：表达式3

判断表达式1的值，值为非0，则取表达式2的值，若为0，则取表达式3的值

条件运算符优于赋值运算符，结合方向为自右向左

可以进行嵌套

例

表达式1？函数调用1：函数调用2

可以用来替代IF语句

### 循环结构

顺序，选择，循环：结构化程序设计的三种基本循环

三种循环语句

while，for， do while



while （表达式）

语句

**表达式类型不限，按值为0或非0觉得是否进行循环**

**多条语句需用花括号**

**注意终止语句**



### DO WHILE 语句



**Do 语句**

**while （表达式）；**

先执行循环体，再计算表达式的值，所以循环体至少执行一次

复合语句花括号，注意终止

注意while添加分号



### For语句<img src="E:\备忘录\QQ图片20210919132456.png" alt="QQ图片20210919132456" style="zoom: 50%;" />

for（表达式1；表达式2；表达式3）循环体语句

计算表达式1

计算表达式2

如果表达式2值非0，执行循环体语句

计算表达式3，继续计算表达式2

如果表达式2值为0，该语句结束

**语法说明**

**for（循环变量赋初值，循环条件，循环变量修正）循环体**

循环体可以是单个语句或复合语句

常用形式

for（i=0,；i<=N;i++)

三个表达式均可省略，但；不可省略

##  空语句

格式  ；（只由一个分号构成）

什么也不做，可以出现在任何地方

对于1+2+...+100问题的变式

例1：for(i=1;i<=;sum+=i*i,i++);

printf("sum=%d\n",sum);

例2：for(i=1,j=100;i<j;sum+=i++,sum+=j--);

表达式1，表达式3均可为逗号表达式

### 关于累加法的讨论

**例：求10！**

**int i,sum=1**

**for(i=1;i<=10;i++)**

**sum=sum*i;**

例2：求1/1+1/2+....1/n

double sum =0

sum=sum+ **1.0/i**

例3：已知π/4=1-1/3+1/5-1/7......

直到累加项的绝对值小于0.000001，求π=？

#### 循环嵌套结构

例：

for（i=1;i<=3;i++)

for (j=1;j<=2;j++)

{

.....}

例1：输出九九乘法表

for(i=1;i<=9:i++)

{

for(j=1;j<=i;j++)

printf("%4d",j*i);

}

例2：计算1!+2!+3!.......+10!

.......



### 循环流程控制

**break语句**

终止包含该语句的最内层语句

**continue语句**

结束循环体的本次执行（后面的语句都不执行，跳转到下一次循环）

while 循环continue结构

continue在while循环中，直接进入下一次循环判断表达式值

在for循环中，执行表达式3后再进入下一次循环进行判断
